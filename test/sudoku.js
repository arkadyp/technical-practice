var expect = require('chai').expect;
var assert = require('chai').assert;
var Sudoku = require('../es5/sudoku');

describe('Sudoku', function() {
    it('should export a function', function() {
        assert.isFunction(Sudoku.solve, 'exports a function called "solve"');
    });

    it('should sold an "easy" puzzle', function() {
        var result = Sudoku.solve([
            [0, 0, 5, 0, 0, 1, 0, 0, 0],
            [9, 7, 0, 6, 5, 0, 8, 0, 0],
            [0, 4, 2, 0, 0, 7, 0, 0, 0],
            [2, 8, 0, 0, 7, 0, 0, 0, 3],
            [0, 0, 7, 0, 0, 0, 5, 0, 0],
            [5, 0, 0, 0, 3, 0, 0, 2, 6],
            [0, 0, 0, 7, 0, 0, 2, 6, 0],
            [0, 0, 3, 0, 2, 9, 0, 5, 8],
            [0, 0, 0, 5, 0, 0, 3, 0, 0]
        ]);

        var solution = [
            [6, 3, 5, 8, 4, 1, 9, 7, 2],
            [9, 7, 1, 6, 5, 2, 8, 3, 4],
            [8, 4, 2, 3, 9, 7, 6, 1, 5],
            [2, 8, 6, 1, 7, 5, 4, 9, 3],
            [3, 9, 7, 2, 6, 4, 5, 8, 1],
            [5, 1, 4, 9, 3, 8, 7, 2, 6],
            [4, 5, 8, 7, 1, 3, 2, 6, 9],
            [7, 6, 3, 4, 2, 9, 1, 5, 8],
            [1, 2, 9, 5, 8, 6, 3, 4, 7]
        ];

        expect(result).to.deep.equal(solution);
    });

    it('should work with an "hard" puzzle', function() {
        var result = Sudoku.solve([
            [0, 0, 0, 1, 0, 0, 7, 0, 6],
            [0, 0, 0, 0, 5, 3, 0, 0, 0],
            [0, 0, 0, 0, 6, 0, 0, 2, 0],
            [0, 3, 0, 8, 0, 0, 0, 0, 4],
            [4, 5, 8, 6, 0, 0, 0, 0, 2],
            [0, 0, 1, 0, 0, 0, 0, 0, 7],
            [0, 0, 0, 3, 0, 4, 0, 5, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 7, 0, 0, 0, 8, 4, 0, 0]
        ]);

        var solution = [
            [5, 4, 9, 1, 8, 2, 7, 3, 6],
            [1, 2, 6, 7, 5, 3, 8, 4, 9],
            [7, 8, 3, 4, 6, 9, 1, 2, 5],
            [9, 3, 7, 8, 2, 1, 5, 6, 4],
            [4, 5, 8, 6, 3, 7, 9, 1, 2],
            [2, 6, 1, 9, 4, 5, 3, 8, 7],
            [8, 9, 2, 3, 7, 4, 6, 5, 1],
            [3, 1, 4, 5, 9, 6, 2, 7, 8],
            [6, 7, 5, 2, 1, 8, 4, 9, 3]
        ];

        //  . . . | 1 . . | 7 . 6
        //  . . . | . 5 3 | . . .
        //  . . . | . 6 . | . 2 .
        // -------|-------|-------
        //  . 3 . | 8 . . | . . 4
        //  4 5 8 | 6 . . | . . 2
        //  . . 1 | . . . | . . 7
        // -------|-------|-------
        //  . . . | 3 . 4 | . 5 .
        //  . 1 . | . . . | . . .
        //  . 7 . | . . 8 | 4 . .

        //  5 4 9 | 1 8 2 | 7 3 6
        //  1 2 6 | 7 5 3 | 8 4 9
        //  7 8 3 | 4 6 9 | 1 2 5
        // -------|-------|-------
        //  9 3 7 | 8 2 1 | 5 6 4
        //  4 5 8 | 6 3 7 | 9 1 2
        //  2 6 1 | 9 4 5 | 3 8 7
        // -------|-------|-------
        //  8 9 2 | 3 7 4 | 6 5 1
        //  3 1 4 | 5 9 6 | 2 7 8
        //  6 7 5 | 2 1 8 | 4 9 3

        expect(result).to.deep.equal(solution);
    });
});